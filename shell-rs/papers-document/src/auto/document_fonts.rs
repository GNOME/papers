// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../ev-girs
// from ../gir-files
// DO NOT EDIT

use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "PpsDocumentFonts")]
    pub struct DocumentFonts(Interface<ffi::PpsDocumentFonts, ffi::PpsDocumentFontsInterface>);

    match fn {
        type_ => || ffi::pps_document_fonts_get_type(),
    }
}

impl DocumentFonts {
    pub const NONE: Option<&'static DocumentFonts> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::DocumentFonts>> Sealed for T {}
}

pub trait DocumentFontsExt: IsA<DocumentFonts> + sealed::Sealed + 'static {
    //#[doc(alias = "pps_document_fonts_fill_model")]
    //fn fill_model(&self, model: /*Ignored*/&gtk::TreeModel) {
    //    unsafe { TODO: call ffi:pps_document_fonts_fill_model() }
    //}

    #[doc(alias = "pps_document_fonts_get_fonts_summary")]
    #[doc(alias = "get_fonts_summary")]
    fn fonts_summary(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::pps_document_fonts_get_fonts_summary(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "pps_document_fonts_scan")]
    fn scan(&self, n_pages: i32) -> bool {
        unsafe {
            from_glib(ffi::pps_document_fonts_scan(
                self.as_ref().to_glib_none().0,
                n_pages,
            ))
        }
    }
}

impl<O: IsA<DocumentFonts>> DocumentFontsExt for O {}
