// Generated by gir (https://github.com/gtk-rs/gir @ 71ca4ed5f76a)
// from ../../ev-girs (@ 1c0f0358b7b0+)
// from ../../gir-files (@ 20031a537e40)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(
    clippy::approx_constant,
    clippy::type_complexity,
    clippy::unreadable_literal,
    clippy::upper_case_acronyms
)]
#![cfg_attr(docsrs, feature(doc_cfg))]

#[allow(unused_imports)]
use libc::{
    c_char, c_double, c_float, c_int, c_long, c_short, c_uchar, c_uint, c_ulong, c_ushort, c_void,
    intptr_t, size_t, ssize_t, uintptr_t, FILE,
};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type PpsPrintPageSet = c_int;
pub const PPS_PRINT_PAGE_SET_ALL: PpsPrintPageSet = 0;
pub const PPS_PRINT_PAGE_SET_EVEN: PpsPrintPageSet = 1;
pub const PPS_PRINT_PAGE_SET_ODD: PpsPrintPageSet = 2;

pub type PpsWindowRunMode = c_int;
pub const PPS_WINDOW_MODE_NORMAL: PpsWindowRunMode = 0;
pub const PPS_WINDOW_MODE_FULLSCREEN: PpsWindowRunMode = 1;
pub const PPS_WINDOW_MODE_PRESENTATION: PpsWindowRunMode = 2;
pub const PPS_WINDOW_MODE_START_VIEW: PpsWindowRunMode = 3;
pub const PPS_WINDOW_MODE_ERROR_VIEW: PpsWindowRunMode = 4;
pub const PPS_WINDOW_MODE_PASSWORD_VIEW: PpsWindowRunMode = 5;

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct PpsApplicationClass {
    pub parent_class: adw::AdwApplicationClass,
}

impl ::std::fmt::Debug for PpsApplicationClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsApplicationClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

#[repr(C)]
pub struct _PpsMetadataClass {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type PpsMetadataClass = *mut _PpsMetadataClass;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct PpsPrintRange {
    pub start: c_int,
    pub end: c_int,
}

impl ::std::fmt::Debug for PpsPrintRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsPrintRange @ {self:p}"))
            .field("start", &self.start)
            .field("end", &self.end)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct PpsSidebarPageInterface {
    pub base_iface: gobject::GTypeInterface,
    pub support_document: Option<
        unsafe extern "C" fn(*mut PpsSidebarPage, *mut papers_document::PpsDocument) -> gboolean,
    >,
    pub set_model:
        Option<unsafe extern "C" fn(*mut PpsSidebarPage, *mut papers_view::PpsDocumentModel)>,
}

impl ::std::fmt::Debug for PpsSidebarPageInterface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsSidebarPageInterface @ {self:p}"))
            .field("base_iface", &self.base_iface)
            .field("support_document", &self.support_document)
            .field("set_model", &self.set_model)
            .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct PpsWindowClass {
    pub parent_class: adw::AdwApplicationWindowClass,
}

impl ::std::fmt::Debug for PpsWindowClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsWindowClass @ {self:p}"))
            .field("parent_class", &self.parent_class)
            .finish()
    }
}

// Classes
#[repr(C)]
pub struct PpsApplication {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for PpsApplication {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsApplication @ {self:p}"))
            .finish()
    }
}

#[repr(C)]
pub struct PpsMetadata {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for PpsMetadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsMetadata @ {self:p}")).finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct PpsWindow {
    pub base_instance: adw::AdwApplicationWindow,
}

impl ::std::fmt::Debug for PpsWindow {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("PpsWindow @ {self:p}"))
            .field("base_instance", &self.base_instance)
            .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct PpsSidebarPage {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for PpsSidebarPage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "PpsSidebarPage @ {self:p}")
    }
}

#[link(name = "ppsshell-4.0")]
#[link(name = "ppsview-4.0")]
#[link(name = "ppsdocument-4.0")]
extern "C" {

    //=========================================================================
    // PpsPrintPageSet
    //=========================================================================
    pub fn pps_print_page_set_get_type() -> GType;

    //=========================================================================
    // PpsWindowRunMode
    //=========================================================================
    pub fn pps_window_run_mode_get_type() -> GType;

    //=========================================================================
    // PpsApplication
    //=========================================================================
    pub fn pps_application_get_type() -> GType;
    pub fn pps_application_new() -> *mut PpsApplication;
    pub fn pps_application_clear_uri(application: *mut PpsApplication);
    pub fn pps_application_get_dot_dir(
        application: *mut PpsApplication,
        create: gboolean,
    ) -> *const c_char;
    pub fn pps_application_get_n_windows(application: *mut PpsApplication) -> c_uint;
    pub fn pps_application_get_uri(application: *mut PpsApplication) -> *const c_char;
    pub fn pps_application_has_window(application: *mut PpsApplication) -> gboolean;
    pub fn pps_application_open_start_view(application: *mut PpsApplication);
    pub fn pps_application_open_uri_at_dest(
        application: *mut PpsApplication,
        uri: *const c_char,
        dest: *mut papers_document::PpsLinkDest,
        mode: PpsWindowRunMode,
        search_string: *const c_char,
    );
    pub fn pps_application_open_uri_list(
        application: *mut PpsApplication,
        files: *mut gio::GListModel,
    );

    //=========================================================================
    // PpsMetadata
    //=========================================================================
    pub fn pps_metadata_get_type() -> GType;
    pub fn pps_metadata_new(file: *mut gio::GFile) -> *mut PpsMetadata;
    pub fn pps_metadata_get_boolean(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: *mut gboolean,
    ) -> gboolean;
    pub fn pps_metadata_get_double(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: *mut c_double,
    ) -> gboolean;
    pub fn pps_metadata_get_int(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: *mut c_int,
    ) -> gboolean;
    pub fn pps_metadata_get_string(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: *mut *const c_char,
    ) -> gboolean;
    pub fn pps_metadata_has_key(metadata: *mut PpsMetadata, key: *const c_char) -> gboolean;
    pub fn pps_metadata_is_empty(metadata: *mut PpsMetadata) -> gboolean;
    pub fn pps_metadata_set_boolean(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: gboolean,
    ) -> gboolean;
    pub fn pps_metadata_set_double(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: c_double,
    ) -> gboolean;
    pub fn pps_metadata_set_int(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: c_int,
    ) -> gboolean;
    pub fn pps_metadata_set_string(
        metadata: *mut PpsMetadata,
        key: *const c_char,
        value: *const c_char,
    ) -> gboolean;

    //=========================================================================
    // PpsWindow
    //=========================================================================
    pub fn pps_window_get_type() -> GType;
    pub fn pps_window_new() -> *mut PpsWindow;
    pub fn pps_window_focus_view(pps_window: *mut PpsWindow);
    pub fn pps_window_get_dbus_object_path(pps_window: *mut PpsWindow) -> *const c_char;
    pub fn pps_window_get_header_bar(pps_window: *mut PpsWindow) -> *mut adw::AdwHeaderBar;
    pub fn pps_window_get_metadata(pps_window: *mut PpsWindow) -> *mut PpsMetadata;
    pub fn pps_window_get_uri(pps_window: *mut PpsWindow) -> *const c_char;
    pub fn pps_window_handle_annot_popup(
        pps_window: *mut PpsWindow,
        annot: *mut papers_document::PpsAnnotation,
    );
    pub fn pps_window_is_empty(pps_window: *mut PpsWindow) -> gboolean;
    pub fn pps_window_open_document(
        pps_window: *mut PpsWindow,
        document: *mut papers_document::PpsDocument,
        dest: *mut papers_document::PpsLinkDest,
        mode: PpsWindowRunMode,
        search_string: *const c_char,
    );
    pub fn pps_window_open_uri(
        pps_window: *mut PpsWindow,
        uri: *const c_char,
        dest: *mut papers_document::PpsLinkDest,
        mode: PpsWindowRunMode,
        search_string: *const c_char,
    );
    pub fn pps_window_print_range(pps_window: *mut PpsWindow, first_page: c_int, last_page: c_int);

    //=========================================================================
    // PpsSidebarPage
    //=========================================================================
    pub fn pps_sidebar_page_get_type() -> GType;
    pub fn pps_sidebar_page_set_model(
        sidebar_page: *mut PpsSidebarPage,
        model: *mut papers_view::PpsDocumentModel,
    );
    pub fn pps_sidebar_page_support_document(
        sidebar_page: *mut PpsSidebarPage,
        document: *mut papers_document::PpsDocument,
    ) -> gboolean;

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn pps_get_resource() -> *mut gio::GResource;
    pub fn pps_is_metadata_supported_for_file(file: *mut gio::GFile) -> gboolean;
    pub fn pps_shell_marshal_VOID__POINTER_POINTER(
        closure: *mut gobject::GClosure,
        return_value: *mut gobject::GValue,
        n_param_values: c_uint,
        param_values: *const gobject::GValue,
        invocation_hint: gpointer,
        marshal_data: gpointer,
    );

}
