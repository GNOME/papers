// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../ev-girs
// from ../gir-files
// DO NOT EDIT

use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "PpsSidebarPage")]
    pub struct SidebarPage(Interface<ffi::PpsSidebarPage, ffi::PpsSidebarPageInterface>);

    match fn {
        type_ => || ffi::pps_sidebar_page_get_type(),
    }
}

impl SidebarPage {
    pub const NONE: Option<&'static SidebarPage> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::SidebarPage>> Sealed for T {}
}

pub trait SidebarPageExt: IsA<SidebarPage> + sealed::Sealed + 'static {
    #[doc(alias = "pps_sidebar_page_set_model")]
    fn set_model(&self, model: &papers_view::DocumentModel) {
        unsafe {
            ffi::pps_sidebar_page_set_model(self.as_ref().to_glib_none().0, model.to_glib_none().0);
        }
    }

    #[doc(alias = "pps_sidebar_page_support_document")]
    fn support_document(&self, document: &impl IsA<papers_document::Document>) -> bool {
        unsafe {
            from_glib(ffi::pps_sidebar_page_support_document(
                self.as_ref().to_glib_none().0,
                document.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "main-widget")]
    fn main_widget(&self) -> Option<gtk::Widget> {
        ObjectExt::property(self.as_ref(), "main-widget")
    }

    #[doc(alias = "main-widget")]
    fn connect_main_widget_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_main_widget_trampoline<
            P: IsA<SidebarPage>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PpsSidebarPage,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(SidebarPage::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::main-widget\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_main_widget_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<SidebarPage>> SidebarPageExt for O {}
