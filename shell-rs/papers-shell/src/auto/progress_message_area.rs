// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../ev-girs
// from ../gir-files
// DO NOT EDIT

use crate::ffi;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "PpsProgressMessageArea")]
    pub struct ProgressMessageArea(Object<ffi::PpsProgressMessageArea, ffi::PpsProgressMessageAreaClass>) @extends gtk::Widget, @implements gtk::Accessible, gtk::Buildable, gtk::ConstraintTarget;

    match fn {
        type_ => || ffi::pps_progress_message_area_get_type(),
    }
}

impl ProgressMessageArea {
    pub const NONE: Option<&'static ProgressMessageArea> = None;

    #[doc(alias = "pps_progress_message_area_new")]
    pub fn new(icon_name: &str, text: &str) -> ProgressMessageArea {
        assert_initialized_main_thread!();
        unsafe {
            gtk::Widget::from_glib_none(ffi::pps_progress_message_area_new(
                icon_name.to_glib_none().0,
                text.to_glib_none().0,
            ))
            .unsafe_cast()
        }
    }

    // rustdoc-stripper-ignore-next
    /// Creates a new builder-pattern struct instance to construct [`ProgressMessageArea`] objects.
    ///
    /// This method returns an instance of [`ProgressMessageAreaBuilder`](crate::builders::ProgressMessageAreaBuilder) which can be used to create [`ProgressMessageArea`] objects.
    pub fn builder() -> ProgressMessageAreaBuilder {
        ProgressMessageAreaBuilder::new()
    }
}

impl Default for ProgressMessageArea {
    fn default() -> Self {
        glib::object::Object::new::<Self>()
    }
}

// rustdoc-stripper-ignore-next
/// A [builder-pattern] type to construct [`ProgressMessageArea`] objects.
///
/// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ProgressMessageAreaBuilder {
    builder: glib::object::ObjectBuilder<'static, ProgressMessageArea>,
}

impl ProgressMessageAreaBuilder {
    fn new() -> Self {
        Self {
            builder: glib::object::Object::builder(),
        }
    }

    pub fn fraction(self, fraction: f64) -> Self {
        Self {
            builder: self.builder.property("fraction", fraction),
        }
    }

    pub fn secondary_text(self, secondary_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("secondary-text", secondary_text.into()),
        }
    }

    pub fn status(self, status: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("status", status.into()),
        }
    }

    pub fn text(self, text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("text", text.into()),
        }
    }

    pub fn can_focus(self, can_focus: bool) -> Self {
        Self {
            builder: self.builder.property("can-focus", can_focus),
        }
    }

    pub fn can_target(self, can_target: bool) -> Self {
        Self {
            builder: self.builder.property("can-target", can_target),
        }
    }

    pub fn css_classes(self, css_classes: impl Into<glib::StrV>) -> Self {
        Self {
            builder: self.builder.property("css-classes", css_classes.into()),
        }
    }

    pub fn css_name(self, css_name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("css-name", css_name.into()),
        }
    }

    //pub fn cursor(self, cursor: /*Ignored*/&gdk::Cursor) -> Self {
    //    Self { builder: self.builder.property("cursor", cursor), }
    //}

    pub fn focus_on_click(self, focus_on_click: bool) -> Self {
        Self {
            builder: self.builder.property("focus-on-click", focus_on_click),
        }
    }

    pub fn focusable(self, focusable: bool) -> Self {
        Self {
            builder: self.builder.property("focusable", focusable),
        }
    }

    pub fn halign(self, halign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("halign", halign),
        }
    }

    pub fn has_tooltip(self, has_tooltip: bool) -> Self {
        Self {
            builder: self.builder.property("has-tooltip", has_tooltip),
        }
    }

    pub fn height_request(self, height_request: i32) -> Self {
        Self {
            builder: self.builder.property("height-request", height_request),
        }
    }

    pub fn hexpand(self, hexpand: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand", hexpand),
        }
    }

    pub fn hexpand_set(self, hexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("hexpand-set", hexpand_set),
        }
    }

    //pub fn layout_manager(self, layout_manager: &impl IsA</*Ignored*/gtk::LayoutManager>) -> Self {
    //    Self { builder: self.builder.property("layout-manager", layout_manager.clone().upcast()), }
    //}

    pub fn margin_bottom(self, margin_bottom: i32) -> Self {
        Self {
            builder: self.builder.property("margin-bottom", margin_bottom),
        }
    }

    pub fn margin_end(self, margin_end: i32) -> Self {
        Self {
            builder: self.builder.property("margin-end", margin_end),
        }
    }

    pub fn margin_start(self, margin_start: i32) -> Self {
        Self {
            builder: self.builder.property("margin-start", margin_start),
        }
    }

    pub fn margin_top(self, margin_top: i32) -> Self {
        Self {
            builder: self.builder.property("margin-top", margin_top),
        }
    }

    pub fn name(self, name: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("name", name.into()),
        }
    }

    pub fn opacity(self, opacity: f64) -> Self {
        Self {
            builder: self.builder.property("opacity", opacity),
        }
    }

    //pub fn overflow(self, overflow: /*Ignored*/gtk::Overflow) -> Self {
    //    Self { builder: self.builder.property("overflow", overflow), }
    //}

    pub fn receives_default(self, receives_default: bool) -> Self {
        Self {
            builder: self.builder.property("receives-default", receives_default),
        }
    }

    pub fn sensitive(self, sensitive: bool) -> Self {
        Self {
            builder: self.builder.property("sensitive", sensitive),
        }
    }

    pub fn tooltip_markup(self, tooltip_markup: impl Into<glib::GString>) -> Self {
        Self {
            builder: self
                .builder
                .property("tooltip-markup", tooltip_markup.into()),
        }
    }

    pub fn tooltip_text(self, tooltip_text: impl Into<glib::GString>) -> Self {
        Self {
            builder: self.builder.property("tooltip-text", tooltip_text.into()),
        }
    }

    pub fn valign(self, valign: gtk::Align) -> Self {
        Self {
            builder: self.builder.property("valign", valign),
        }
    }

    pub fn vexpand(self, vexpand: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand", vexpand),
        }
    }

    pub fn vexpand_set(self, vexpand_set: bool) -> Self {
        Self {
            builder: self.builder.property("vexpand-set", vexpand_set),
        }
    }

    pub fn visible(self, visible: bool) -> Self {
        Self {
            builder: self.builder.property("visible", visible),
        }
    }

    pub fn width_request(self, width_request: i32) -> Self {
        Self {
            builder: self.builder.property("width-request", width_request),
        }
    }

    //pub fn accessible_role(self, accessible_role: /*Ignored*/gtk::AccessibleRole) -> Self {
    //    Self { builder: self.builder.property("accessible-role", accessible_role), }
    //}

    // rustdoc-stripper-ignore-next
    /// Build the [`ProgressMessageArea`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> ProgressMessageArea {
        self.builder.build()
    }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::ProgressMessageArea>> Sealed for T {}
}

pub trait ProgressMessageAreaExt: IsA<ProgressMessageArea> + sealed::Sealed + 'static {
    #[doc(alias = "pps_progress_message_area_add_button")]
    fn add_button(&self, first_button_text: &str, response_id: i32) {
        unsafe {
            ffi::pps_progress_message_area_add_button(
                self.as_ref().to_glib_none().0,
                first_button_text.to_glib_none().0,
                response_id,
            );
        }
    }

    #[doc(alias = "pps_progress_message_area_get_info_bar")]
    #[doc(alias = "get_info_bar")]
    fn info_bar(&self) -> Option<gtk::InfoBar> {
        unsafe {
            from_glib_none(ffi::pps_progress_message_area_get_info_bar(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "pps_progress_message_area_set_fraction")]
    #[doc(alias = "fraction")]
    fn set_fraction(&self, fraction: f64) {
        unsafe {
            ffi::pps_progress_message_area_set_fraction(self.as_ref().to_glib_none().0, fraction);
        }
    }

    #[doc(alias = "pps_progress_message_area_set_image_from_icon_name")]
    fn set_image_from_icon_name(&self, icon_name: &str) {
        unsafe {
            ffi::pps_progress_message_area_set_image_from_icon_name(
                self.as_ref().to_glib_none().0,
                icon_name.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "pps_progress_message_area_set_secondary_text")]
    #[doc(alias = "secondary-text")]
    fn set_secondary_text(&self, str: &str) {
        unsafe {
            ffi::pps_progress_message_area_set_secondary_text(
                self.as_ref().to_glib_none().0,
                str.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "pps_progress_message_area_set_status")]
    #[doc(alias = "status")]
    fn set_status(&self, str: &str) {
        unsafe {
            ffi::pps_progress_message_area_set_status(
                self.as_ref().to_glib_none().0,
                str.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "pps_progress_message_area_set_text")]
    #[doc(alias = "text")]
    fn set_text(&self, str: &str) {
        unsafe {
            ffi::pps_progress_message_area_set_text(
                self.as_ref().to_glib_none().0,
                str.to_glib_none().0,
            );
        }
    }

    fn fraction(&self) -> f64 {
        ObjectExt::property(self.as_ref(), "fraction")
    }

    #[doc(alias = "secondary-text")]
    fn secondary_text(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "secondary-text")
    }

    fn status(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "status")
    }

    fn text(&self) -> Option<glib::GString> {
        ObjectExt::property(self.as_ref(), "text")
    }

    #[doc(alias = "fraction")]
    fn connect_fraction_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fraction_trampoline<
            P: IsA<ProgressMessageArea>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PpsProgressMessageArea,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ProgressMessageArea::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::fraction\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_fraction_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "secondary-text")]
    fn connect_secondary_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_secondary_text_trampoline<
            P: IsA<ProgressMessageArea>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PpsProgressMessageArea,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ProgressMessageArea::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::secondary-text\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_secondary_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "status")]
    fn connect_status_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_status_trampoline<
            P: IsA<ProgressMessageArea>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PpsProgressMessageArea,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ProgressMessageArea::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::status\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_status_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "text")]
    fn connect_text_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_text_trampoline<
            P: IsA<ProgressMessageArea>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::PpsProgressMessageArea,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(ProgressMessageArea::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::text\0".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_text_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<ProgressMessageArea>> ProgressMessageAreaExt for O {}
