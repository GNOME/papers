// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../ev-girs
// from ../gir-files
// DO NOT EDIT

use crate::Job;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "PpsJobThumbnailCairo")]
    pub struct JobThumbnailCairo(Object<ffi::PpsJobThumbnailCairo, ffi::PpsJobThumbnailCairoClass>) @extends Job;

    match fn {
        type_ => || ffi::pps_job_thumbnail_cairo_get_type(),
    }
}

impl JobThumbnailCairo {
    pub const NONE: Option<&'static JobThumbnailCairo> = None;

    #[doc(alias = "pps_job_thumbnail_cairo_new")]
    pub fn new(
        document: &impl IsA<papers_document::Document>,
        page: i32,
        rotation: i32,
        scale: f64,
    ) -> JobThumbnailCairo {
        assert_initialized_main_thread!();
        unsafe {
            Job::from_glib_full(ffi::pps_job_thumbnail_cairo_new(
                document.as_ref().to_glib_none().0,
                page,
                rotation,
                scale,
            ))
            .unsafe_cast()
        }
    }

    #[doc(alias = "pps_job_thumbnail_cairo_new_with_target_size")]
    #[doc(alias = "new_with_target_size")]
    pub fn with_target_size(
        document: &impl IsA<papers_document::Document>,
        page: i32,
        rotation: i32,
        target_width: i32,
        target_height: i32,
    ) -> JobThumbnailCairo {
        assert_initialized_main_thread!();
        unsafe {
            Job::from_glib_full(ffi::pps_job_thumbnail_cairo_new_with_target_size(
                document.as_ref().to_glib_none().0,
                page,
                rotation,
                target_width,
                target_height,
            ))
            .unsafe_cast()
        }
    }
}
